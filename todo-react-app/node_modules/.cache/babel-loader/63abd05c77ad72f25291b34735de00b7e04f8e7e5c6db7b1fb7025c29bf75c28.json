{"ast":null,"code":"import axios from \"axios\";\nimport { API_BASE_URL } from \"../api-config\";\n\n//요청하는 메서드를 만들것이다.\n//api : 호출할 API의 경로(/todo, /users)\n//method : HTTP메서드(GET,POST,PUT,DELETE)\n//request : 요청에 담을 데이터(주로 POST,PUT에서 사용)\nexport function call(api, method, request) {\n  //기본 옵션 설정\n  let options = {\n    url: API_BASE_URL + api,\n    method: method,\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  //false,0,빈문자열,null,undefined,Nan -> false로 취급\n  if (request) {\n    //JSON.stringify() : 객체를 JSON문자열로 변환.\n    options.data = JSON.stringify(request);\n  }\n\n  //앞서 설정한 options객체를 사용하여 axios로 http요청을 보낸다.\n  return axios(options)\n  //요청이 성공적으로 처리된 경우 실행되는 코드이다\n  .then(response => {\n    console.log(response.data);\n    return response.data;\n  }).catch(error => {\n    console.log(\"에러코드 : \", error.status);\n    if (error.status === 403) {\n      window.location.href = \"/login\";\n    }\n  });\n}","map":{"version":3,"names":["axios","API_BASE_URL","call","api","method","request","options","url","headers","data","JSON","stringify","then","response","console","log","catch","error","status","window","location","href"],"sources":["D:/full_stack_lsw/04.React/todo-react-app/src/service/ApiService.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { API_BASE_URL } from \"../api-config\";\r\n\r\n//요청하는 메서드를 만들것이다.\r\n//api : 호출할 API의 경로(/todo, /users)\r\n//method : HTTP메서드(GET,POST,PUT,DELETE)\r\n//request : 요청에 담을 데이터(주로 POST,PUT에서 사용)\r\nexport function call(api, method, request) {\r\n    //기본 옵션 설정\r\n    let options = {\r\n        url : API_BASE_URL + api,\r\n        method : method,\r\n        headers:{\r\n            \"Content-Type\":\"application/json\"\r\n        }\r\n    }\r\n\r\n    //false,0,빈문자열,null,undefined,Nan -> false로 취급\r\n    if(request){\r\n        //JSON.stringify() : 객체를 JSON문자열로 변환.\r\n        options.data = JSON.stringify(request);\r\n    }\r\n\r\n    //앞서 설정한 options객체를 사용하여 axios로 http요청을 보낸다.\r\n    return axios(options)\r\n    //요청이 성공적으로 처리된 경우 실행되는 코드이다\r\n        .then(response => {\r\n            console.log(response.data);\r\n            return response.data;\r\n        })\r\n        .catch(error => {\r\n            console.log(\"에러코드 : \",error.status)\r\n            if(error.status === 403){\r\n                window.location.href=\"/login\"\r\n            }\r\n        })\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,YAAY,QAAQ,eAAe;;AAE5C;AACA;AACA;AACA;AACA,OAAO,SAASC,IAAIA,CAACC,GAAG,EAAEC,MAAM,EAAEC,OAAO,EAAE;EACvC;EACA,IAAIC,OAAO,GAAG;IACVC,GAAG,EAAGN,YAAY,GAAGE,GAAG;IACxBC,MAAM,EAAGA,MAAM;IACfI,OAAO,EAAC;MACJ,cAAc,EAAC;IACnB;EACJ,CAAC;;EAED;EACA,IAAGH,OAAO,EAAC;IACP;IACAC,OAAO,CAACG,IAAI,GAAGC,IAAI,CAACC,SAAS,CAACN,OAAO,CAAC;EAC1C;;EAEA;EACA,OAAOL,KAAK,CAACM,OAAO;EACpB;EAAA,CACKM,IAAI,CAACC,QAAQ,IAAI;IACdC,OAAO,CAACC,GAAG,CAACF,QAAQ,CAACJ,IAAI,CAAC;IAC1B,OAAOI,QAAQ,CAACJ,IAAI;EACxB,CAAC,CAAC,CACDO,KAAK,CAACC,KAAK,IAAI;IACZH,OAAO,CAACC,GAAG,CAAC,SAAS,EAACE,KAAK,CAACC,MAAM,CAAC;IACnC,IAAGD,KAAK,CAACC,MAAM,KAAK,GAAG,EAAC;MACpBC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAC,QAAQ;IACjC;EACJ,CAAC,CAAC;AACV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}