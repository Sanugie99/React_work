{"ast":null,"code":"var _jsxFileName = \"D:\\\\full_stack_lsw\\\\04.React\\\\todo-react-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport logo from './logo.svg';\nimport './App.css';\nimport { useState } from \"react\";\n//경로는 현재 파일을 기준으로 목적지를 찾아가면 된다.\n//import {Farewell, Greeting} from './Greetings'\nimport Todo from './Todo';\nimport AddTodo from './AddTodo';\nimport { Container, List, Paper } from '@mui/material';\n\n//Container\n//레이아웃의 가로 폭을 제한하고, 중앙 정렬 및 가본 패딩을 자동으로 적용해주는 컴포넌트\n//주요 props\n//maxWidth : 최대 너비를 지정(xs, sm, md, lg, xl, false)\n//fixed : maxWidth와 관계없이 항상 고정폭 적용\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  //우리는 하나의 할 일을 객체로 관리할 것이다.\n  //id, title, done\n  const [items, setItems] = useState([]);\n\n  //Todo를 직접 추가하기 위한 백엔드 콜을 대신할 가짜 함수를 만들어보자.\n  const add = item => {\n    //newItem 객체가 하나의 Todo\n    const newItem = {\n      ...item,\n      //title:\"내용\"이 들어감\n      id: \"ID-\" + item.length,\n      done: false\n    };\n\n    //상태를 변화시키는 함수를 호출하면 state의 변경사항이 화면에 적용된다.\n    //prev 에는 처음엔 useState의 초기값이 들어감 그 후론 이전에 내용이 들어감\n    setItems(prev => [...prev, newItem]);\n    console.log(\"items : \", [...items, newItem]);\n  };\n\n  //삭제를 해주는 deleteItem()함수 만들기\n  //delete from 테이블 where id=0;\n  const deleteItem = item => {\n    const newItems = items.filter(e => e.id !== item.id);\n    //삭제할 아이템을 제외한 아이템을 다시 배열에 지정한다\n    setItems([...newItems]);\n  };\n\n  //React는 key속성에 들어있는 값을 참고해서, 리스트의 요소가 변경될 경우 어떤 요소가 변경되었는지 빠르게 파악할 수 있다.\n  const todoItems = items.length > 0 &&\n  /*#__PURE__*/\n  //Paper 컴포넌트 -> 종이같은 표면 효과를 제공하는 컨테이너 컴포넌트\n  //elevation(그림자 깊이)를 통해 높낮이를 표현하고 배경색과 그림자 효과로 콘텐츠를 돋보이게 한다.\n  _jsxDEV(Paper, {\n    style: {\n      margin: 16\n    },\n    children: /*#__PURE__*/_jsxDEV(List, {\n      children: items.map(item => /*#__PURE__*/_jsxDEV(Todo, {\n        item: item,\n        deleteItem: deleteItem\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"md\",\n      children: [/*#__PURE__*/_jsxDEV(AddTodo, {\n        add: add\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), todoItems]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"6WAym07vHedVzpAy8bFDJKqtv8I=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","useState","Todo","AddTodo","Container","List","Paper","jsxDEV","_jsxDEV","App","_s","items","setItems","add","item","newItem","id","length","done","prev","console","log","deleteItem","newItems","filter","e","todoItems","style","margin","children","map","fileName","_jsxFileName","lineNumber","columnNumber","className","maxWidth","_c","$RefreshReg$"],"sources":["D:/full_stack_lsw/04.React/todo-react-app/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport { useState } from \"react\"\n//경로는 현재 파일을 기준으로 목적지를 찾아가면 된다.\n//import {Farewell, Greeting} from './Greetings'\nimport Todo from './Todo';\nimport AddTodo from './AddTodo';\nimport { Container, List, Paper } from '@mui/material';\n\n//Container\n//레이아웃의 가로 폭을 제한하고, 중앙 정렬 및 가본 패딩을 자동으로 적용해주는 컴포넌트\n//주요 props\n//maxWidth : 최대 너비를 지정(xs, sm, md, lg, xl, false)\n//fixed : maxWidth와 관계없이 항상 고정폭 적용\n\n\nfunction App() {\n  //우리는 하나의 할 일을 객체로 관리할 것이다.\n  //id, title, done\n  const [items, setItems] = useState([])\n\n  //Todo를 직접 추가하기 위한 백엔드 콜을 대신할 가짜 함수를 만들어보자.\n  const add = (item) => {\n    //newItem 객체가 하나의 Todo\n    const newItem = {\n      ...item,//title:\"내용\"이 들어감\n      id: \"ID-\" + item.length,\n      done: false,\n    }\n\n    //상태를 변화시키는 함수를 호출하면 state의 변경사항이 화면에 적용된다.\n    //prev 에는 처음엔 useState의 초기값이 들어감 그 후론 이전에 내용이 들어감\n    setItems(prev => [...prev, newItem])\n    console.log(\"items : \", [...items, newItem]);\n  }\n\n  //삭제를 해주는 deleteItem()함수 만들기\n  //delete from 테이블 where id=0;\n  const deleteItem = (item) => {\n    const newItems = items.filter(e => e.id !== item.id);\n    //삭제할 아이템을 제외한 아이템을 다시 배열에 지정한다\n    setItems([...newItems]);\n  }\n\n  //React는 key속성에 들어있는 값을 참고해서, 리스트의 요소가 변경될 경우 어떤 요소가 변경되었는지 빠르게 파악할 수 있다.\n  const todoItems = items.length > 0 &&\n    //Paper 컴포넌트 -> 종이같은 표면 효과를 제공하는 컨테이너 컴포넌트\n    //elevation(그림자 깊이)를 통해 높낮이를 표현하고 배경색과 그림자 효과로 콘텐츠를 돋보이게 한다.\n    <Paper style={{ margin: 16 }}>\n      <List>{/*일련의 항목을 세로로 나열하는 컨테이너 역할 */}\n        {items.map((item) => (\n          <Todo item={item} key={item.id} deleteItem={deleteItem}/>\n        ))}\n      </List>\n    </Paper>\n\n  return (\n    <div className=\"App\">\n      <Container maxWidth=\"md\">\n        <AddTodo add={add} />{/* AddTodo에 add 함수를 전달. */}\n        {todoItems}\n      </Container>\n    </div>\n  );\n\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,IAAI,MAAM,YAAY;AAC7B,OAAO,WAAW;AAClB,SAASC,QAAQ,QAAQ,OAAO;AAChC;AACA;AACA,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,OAAO,MAAM,WAAW;AAC/B,SAASC,SAAS,EAAEC,IAAI,EAAEC,KAAK,QAAQ,eAAe;;AAEtD;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGA,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA,MAAMY,GAAG,GAAIC,IAAI,IAAK;IACpB;IACA,MAAMC,OAAO,GAAG;MACd,GAAGD,IAAI;MAAC;MACRE,EAAE,EAAE,KAAK,GAAGF,IAAI,CAACG,MAAM;MACvBC,IAAI,EAAE;IACR,CAAC;;IAED;IACA;IACAN,QAAQ,CAACO,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEJ,OAAO,CAAC,CAAC;IACpCK,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE,CAAC,GAAGV,KAAK,EAAEI,OAAO,CAAC,CAAC;EAC9C,CAAC;;EAED;EACA;EACA,MAAMO,UAAU,GAAIR,IAAI,IAAK;IAC3B,MAAMS,QAAQ,GAAGZ,KAAK,CAACa,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACT,EAAE,KAAKF,IAAI,CAACE,EAAE,CAAC;IACpD;IACAJ,QAAQ,CAAC,CAAC,GAAGW,QAAQ,CAAC,CAAC;EACzB,CAAC;;EAED;EACA,MAAMG,SAAS,GAAGf,KAAK,CAACM,MAAM,GAAG,CAAC;EAAA;EAChC;EACA;EACAT,OAAA,CAACF,KAAK;IAACqB,KAAK,EAAE;MAAEC,MAAM,EAAE;IAAG,CAAE;IAAAC,QAAA,eAC3BrB,OAAA,CAACH,IAAI;MAAAwB,QAAA,EACFlB,KAAK,CAACmB,GAAG,CAAEhB,IAAI,iBACdN,OAAA,CAACN,IAAI;QAACY,IAAI,EAAEA,IAAK;QAAeQ,UAAU,EAAEA;MAAW,GAAhCR,IAAI,CAACE,EAAE;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA0B,CACzD;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;EAEV,oBACE1B,OAAA;IAAK2B,SAAS,EAAC,KAAK;IAAAN,QAAA,eAClBrB,OAAA,CAACJ,SAAS;MAACgC,QAAQ,EAAC,IAAI;MAAAP,QAAA,gBACtBrB,OAAA,CAACL,OAAO;QAACU,GAAG,EAAEA;MAAI;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EACpBR,SAAS;IAAA;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACT,CAAC;AAGV;AAACxB,EAAA,CAjDQD,GAAG;AAAA4B,EAAA,GAAH5B,GAAG;AAmDZ,eAAeA,GAAG;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}